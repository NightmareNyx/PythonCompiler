/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ARule10Statement extends PStatement
{
    private final LinkedList _tab_ = new TypedLinkedList(new Tab_Cast());
    private PIdentifier _identifier_;
    private TSquareLeftBr _squareLeftBr_;
    private PExpression _exp1_;
    private TSquareRightBr _squareRightBr_;
    private TAssign _assign_;
    private PExpression _exp2_;

    public ARule10Statement()
    {
    }

    public ARule10Statement(
        List _tab_,
        PIdentifier _identifier_,
        TSquareLeftBr _squareLeftBr_,
        PExpression _exp1_,
        TSquareRightBr _squareRightBr_,
        TAssign _assign_,
        PExpression _exp2_)
    {
        {
            this._tab_.clear();
            this._tab_.addAll(_tab_);
        }

        setIdentifier(_identifier_);

        setSquareLeftBr(_squareLeftBr_);

        setExp1(_exp1_);

        setSquareRightBr(_squareRightBr_);

        setAssign(_assign_);

        setExp2(_exp2_);

    }

    public ARule10Statement(
        XTTab _tab_,
        PIdentifier _identifier_,
        TSquareLeftBr _squareLeftBr_,
        PExpression _exp1_,
        TSquareRightBr _squareRightBr_,
        TAssign _assign_,
        PExpression _exp2_)
    {
        if(_tab_ != null)
        {
            while(_tab_ instanceof X1TTab)
            {
                this._tab_.addFirst(((X1TTab) _tab_).getTTab());
                _tab_ = ((X1TTab) _tab_).getXTTab();
            }
            this._tab_.addFirst(((X2TTab) _tab_).getTTab());
        }

        setIdentifier(_identifier_);

        setSquareLeftBr(_squareLeftBr_);

        setExp1(_exp1_);

        setSquareRightBr(_squareRightBr_);

        setAssign(_assign_);

        setExp2(_exp2_);

    }
    public Object clone()
    {
        return new ARule10Statement(
            cloneList(_tab_),
            (PIdentifier) cloneNode(_identifier_),
            (TSquareLeftBr) cloneNode(_squareLeftBr_),
            (PExpression) cloneNode(_exp1_),
            (TSquareRightBr) cloneNode(_squareRightBr_),
            (TAssign) cloneNode(_assign_),
            (PExpression) cloneNode(_exp2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARule10Statement(this);
    }

    public LinkedList getTab()
    {
        return _tab_;
    }

    public void setTab(List list)
    {
        _tab_.clear();
        _tab_.addAll(list);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TSquareLeftBr getSquareLeftBr()
    {
        return _squareLeftBr_;
    }

    public void setSquareLeftBr(TSquareLeftBr node)
    {
        if(_squareLeftBr_ != null)
        {
            _squareLeftBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _squareLeftBr_ = node;
    }

    public PExpression getExp1()
    {
        return _exp1_;
    }

    public void setExp1(PExpression node)
    {
        if(_exp1_ != null)
        {
            _exp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp1_ = node;
    }

    public TSquareRightBr getSquareRightBr()
    {
        return _squareRightBr_;
    }

    public void setSquareRightBr(TSquareRightBr node)
    {
        if(_squareRightBr_ != null)
        {
            _squareRightBr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _squareRightBr_ = node;
    }

    public TAssign getAssign()
    {
        return _assign_;
    }

    public void setAssign(TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assign_ = node;
    }

    public PExpression getExp2()
    {
        return _exp2_;
    }

    public void setExp2(PExpression node)
    {
        if(_exp2_ != null)
        {
            _exp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tab_)
            + toString(_identifier_)
            + toString(_squareLeftBr_)
            + toString(_exp1_)
            + toString(_squareRightBr_)
            + toString(_assign_)
            + toString(_exp2_);
    }

    void removeChild(Node child)
    {
        if(_tab_.remove(child))
        {
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_squareLeftBr_ == child)
        {
            _squareLeftBr_ = null;
            return;
        }

        if(_exp1_ == child)
        {
            _exp1_ = null;
            return;
        }

        if(_squareRightBr_ == child)
        {
            _squareRightBr_ = null;
            return;
        }

        if(_assign_ == child)
        {
            _assign_ = null;
            return;
        }

        if(_exp2_ == child)
        {
            _exp2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _tab_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_squareLeftBr_ == oldChild)
        {
            setSquareLeftBr((TSquareLeftBr) newChild);
            return;
        }

        if(_exp1_ == oldChild)
        {
            setExp1((PExpression) newChild);
            return;
        }

        if(_squareRightBr_ == oldChild)
        {
            setSquareRightBr((TSquareRightBr) newChild);
            return;
        }

        if(_assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(_exp2_ == oldChild)
        {
            setExp2((PExpression) newChild);
            return;
        }

    }

    private class Tab_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TTab node = (TTab) o;

            if((node.parent() != null) &&
                (node.parent() != ARule10Statement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ARule10Statement.this))
            {
                node.parent(ARule10Statement.this);
            }

            return node;
        }
    }
}
