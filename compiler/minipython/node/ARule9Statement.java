/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ARule9Statement extends PStatement
{
    private final LinkedList _tab_ = new TypedLinkedList(new Tab_Cast());
    private PIdentifier _identifier_;
    private TAssign _assign_;
    private PExpression _expression_;

    public ARule9Statement()
    {
    }

    public ARule9Statement(
        List _tab_,
        PIdentifier _identifier_,
        TAssign _assign_,
        PExpression _expression_)
    {
        {
            this._tab_.clear();
            this._tab_.addAll(_tab_);
        }

        setIdentifier(_identifier_);

        setAssign(_assign_);

        setExpression(_expression_);

    }

    public ARule9Statement(
        XTTab _tab_,
        PIdentifier _identifier_,
        TAssign _assign_,
        PExpression _expression_)
    {
        if(_tab_ != null)
        {
            while(_tab_ instanceof X1TTab)
            {
                this._tab_.addFirst(((X1TTab) _tab_).getTTab());
                _tab_ = ((X1TTab) _tab_).getXTTab();
            }
            this._tab_.addFirst(((X2TTab) _tab_).getTTab());
        }

        setIdentifier(_identifier_);

        setAssign(_assign_);

        setExpression(_expression_);

    }
    public Object clone()
    {
        return new ARule9Statement(
            cloneList(_tab_),
            (PIdentifier) cloneNode(_identifier_),
            (TAssign) cloneNode(_assign_),
            (PExpression) cloneNode(_expression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARule9Statement(this);
    }

    public LinkedList getTab()
    {
        return _tab_;
    }

    public void setTab(List list)
    {
        _tab_.clear();
        _tab_.addAll(list);
    }

    public PIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TAssign getAssign()
    {
        return _assign_;
    }

    public void setAssign(TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assign_ = node;
    }

    public PExpression getExpression()
    {
        return _expression_;
    }

    public void setExpression(PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _expression_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_tab_)
            + toString(_identifier_)
            + toString(_assign_)
            + toString(_expression_);
    }

    void removeChild(Node child)
    {
        if(_tab_.remove(child))
        {
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_assign_ == child)
        {
            _assign_ = null;
            return;
        }

        if(_expression_ == child)
        {
            _expression_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _tab_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(_assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(_expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

    }

    private class Tab_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TTab node = (TTab) o;

            if((node.parent() != null) &&
                (node.parent() != ARule9Statement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ARule9Statement.this))
            {
                node.parent(ARule9Statement.this);
            }

            return node;
        }
    }
}
