/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class ARule3Statement extends PStatement
{
    private PExpression _exp1_;
    private final LinkedList _moreExpressions_ = new TypedLinkedList(new MoreExpressions_Cast());

    public ARule3Statement()
    {
    }

    public ARule3Statement(
        PExpression _exp1_,
        List _moreExpressions_)
    {
        setExp1(_exp1_);

        {
            this._moreExpressions_.clear();
            this._moreExpressions_.addAll(_moreExpressions_);
        }

    }
    public Object clone()
    {
        return new ARule3Statement(
            (PExpression) cloneNode(_exp1_),
            cloneList(_moreExpressions_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARule3Statement(this);
    }

    public PExpression getExp1()
    {
        return _exp1_;
    }

    public void setExp1(PExpression node)
    {
        if(_exp1_ != null)
        {
            _exp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp1_ = node;
    }

    public LinkedList getMoreExpressions()
    {
        return _moreExpressions_;
    }

    public void setMoreExpressions(List list)
    {
        _moreExpressions_.clear();
        _moreExpressions_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_exp1_)
            + toString(_moreExpressions_);
    }

    void removeChild(Node child)
    {
        if(_exp1_ == child)
        {
            _exp1_ = null;
            return;
        }

        if(_moreExpressions_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exp1_ == oldChild)
        {
            setExp1((PExpression) newChild);
            return;
        }

        for(ListIterator i = _moreExpressions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class MoreExpressions_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PMoreExpressions node = (PMoreExpressions) o;

            if((node.parent() != null) &&
                (node.parent() != ARule3Statement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ARule3Statement.this))
            {
                node.parent(ARule3Statement.this);
            }

            return node;
        }
    }
}
